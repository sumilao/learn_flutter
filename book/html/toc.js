// Populate the sidebar
//
// This is a script, and not included directly in the page, to control the total size of the book.
// The TOC contains an entry for each page, so if each page includes a copy of the TOC,
// the total size of the page becomes O(n**2).
class MDBookSidebarScrollbox extends HTMLElement {
    constructor() {
        super();
    }
    connectedCallback() {
        this.innerHTML = '<ol class="chapter"><li class="chapter-item expanded "><a href="preface.html"><strong aria-hidden="true">1.</strong> 第二版序</a></li><li class="chapter-item expanded "><a href="chapter1/index.html"><strong aria-hidden="true">2.</strong> 第一章：起步</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="chapter1/mobile_development_intro.html"><strong aria-hidden="true">2.1.</strong> 1.1：移动开发技术简介</a></li><li class="chapter-item expanded "><a href="chapter1/flutter_intro.html"><strong aria-hidden="true">2.2.</strong> 1.2：初识Flutter</a></li><li class="chapter-item expanded "><a href="chapter1/install_flutter.html"><strong aria-hidden="true">2.3.</strong> 1.3：搭建Flutter开发环境</a></li><li class="chapter-item expanded "><a href="chapter1/dart.html"><strong aria-hidden="true">2.4.</strong> 1.4：Dart语言简介</a></li></ol></li><li class="chapter-item expanded "><a href="chapter2/index.html"><strong aria-hidden="true">3.</strong> 第二章：第一个Flutter应用</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="chapter2/first_flutter_app.html"><strong aria-hidden="true">3.1.</strong> 2.1：计数器应用示例</a></li><li class="chapter-item expanded "><a href="chapter2/flutter_widget_intro.html"><strong aria-hidden="true">3.2.</strong> 2.2：Widget简介</a></li><li class="chapter-item expanded "><a href="chapter2/state_manage.html"><strong aria-hidden="true">3.3.</strong> 2.3：状态管理</a></li><li class="chapter-item expanded "><a href="chapter2/flutter_router.html"><strong aria-hidden="true">3.4.</strong> 2.4：路由管理</a></li><li class="chapter-item expanded "><a href="chapter2/flutter_package_mgr.html"><strong aria-hidden="true">3.5.</strong> 2.5：包管理</a></li><li class="chapter-item expanded "><a href="chapter2/flutter_assets_mgr.html"><strong aria-hidden="true">3.6.</strong> 2.6：资源管理</a></li><li class="chapter-item expanded "><a href="chapter2/flutter_app_debug.html"><strong aria-hidden="true">3.7.</strong> 2.7：调试Flutter应用</a></li><li class="chapter-item expanded "><a href="chapter2/thread_model_and_error_report.html"><strong aria-hidden="true">3.8.</strong> 2.8：Flutter异常捕获</a></li></ol></li><li class="chapter-item expanded "><a href="chapter3/index.html"><strong aria-hidden="true">4.</strong> 第三章：基础组件</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="chapter3/text.html"><strong aria-hidden="true">4.1.</strong> 3.1：文本及样式</a></li><li class="chapter-item expanded "><a href="chapter3/buttons.html"><strong aria-hidden="true">4.2.</strong> 3.2：按钮</a></li><li class="chapter-item expanded "><a href="chapter3/img_and_icon.html"><strong aria-hidden="true">4.3.</strong> 3.3：图片和Icon</a></li><li class="chapter-item expanded "><a href="chapter3/radio_and_checkbox.html"><strong aria-hidden="true">4.4.</strong> 3.4：单选开关和复选框</a></li><li class="chapter-item expanded "><a href="chapter3/input_and_form.html"><strong aria-hidden="true">4.5.</strong> 3.5：输入框及表单</a></li><li class="chapter-item expanded "><a href="chapter3/progress.html"><strong aria-hidden="true">4.6.</strong> 3.6：进度指示器</a></li></ol></li><li class="chapter-item expanded "><a href="chapter4/index.html"><strong aria-hidden="true">5.</strong> 第四章：布局类组件</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="chapter4/intro.html"><strong aria-hidden="true">5.1.</strong> 4.1：布局类组件简介</a></li><li class="chapter-item expanded "><a href="chapter4/constraints.html"><strong aria-hidden="true">5.2.</strong> 4.2：布局原理与约束（constraints）</a></li><li class="chapter-item expanded "><a href="chapter4/row_and_column.html"><strong aria-hidden="true">5.3.</strong> 4.3：线性布局（Row和Column）</a></li><li class="chapter-item expanded "><a href="chapter4/flex.html"><strong aria-hidden="true">5.4.</strong> 4.4：弹性布局（Flex）</a></li><li class="chapter-item expanded "><a href="chapter4/wrap_and_flow.html"><strong aria-hidden="true">5.5.</strong> 4.5：流式布局（Wrap、Flow）</a></li><li class="chapter-item expanded "><a href="chapter4/stack.html"><strong aria-hidden="true">5.6.</strong> 4.6：层叠布局（Stack、Positioned）</a></li><li class="chapter-item expanded "><a href="chapter4/alignment.html"><strong aria-hidden="true">5.7.</strong> 4.7：对齐与相对定位（Align）</a></li><li class="chapter-item expanded "><a href="chapter4/layoutbuilder.html"><strong aria-hidden="true">5.8.</strong> 4.8：LayoutBuilder、AfterLayout</a></li></ol></li><li class="chapter-item expanded "><a href="chapter5/index.html"><strong aria-hidden="true">6.</strong> 第五章：容器类组件</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="chapter5/padding.html"><strong aria-hidden="true">6.1.</strong> 5.1：填充（Padding）</a></li><li class="chapter-item expanded "><a href="chapter5/decoratedbox.html"><strong aria-hidden="true">6.2.</strong> 5.2：装饰容器（DecoratedBox）</a></li><li class="chapter-item expanded "><a href="chapter5/transform.html"><strong aria-hidden="true">6.3.</strong> 5.3：变换（Transform）</a></li><li class="chapter-item expanded "><a href="chapter5/container.html"><strong aria-hidden="true">6.4.</strong> 5.4：容器组件（Container）</a></li><li class="chapter-item expanded "><a href="chapter5/clip.html"><strong aria-hidden="true">6.5.</strong> 5.5：剪裁（Clip）</a></li><li class="chapter-item expanded "><a href="chapter5/fittedbox.html"><strong aria-hidden="true">6.6.</strong> 5.6：空间适配（FittedBox）</a></li><li class="chapter-item expanded "><a href="chapter5/material_scaffold.html"><strong aria-hidden="true">6.7.</strong> 5.7：页面骨架（Scaffold）</a></li></ol></li><li class="chapter-item expanded "><a href="chapter6/index.html"><strong aria-hidden="true">7.</strong> 第六章：可滚动组件</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="chapter6/intro.html"><strong aria-hidden="true">7.1.</strong> 6.1：可滚动组件简介</a></li><li class="chapter-item expanded "><a href="chapter6/single_child_scrollview.html"><strong aria-hidden="true">7.2.</strong> 6.2：SingleChildScrollView</a></li><li class="chapter-item expanded "><a href="chapter6/listview.html"><strong aria-hidden="true">7.3.</strong> 6.3：ListView</a></li><li class="chapter-item expanded "><a href="chapter6/scroll_controller.html"><strong aria-hidden="true">7.4.</strong> 6.4：滚动监听及控制</a></li><li class="chapter-item expanded "><a href="chapter6/animatedlist.html"><strong aria-hidden="true">7.5.</strong> 6.5：AnimatedList</a></li><li class="chapter-item expanded "><a href="chapter6/gridview.html"><strong aria-hidden="true">7.6.</strong> 6.6：GridView</a></li><li class="chapter-item expanded "><a href="chapter6/pageview.html"><strong aria-hidden="true">7.7.</strong> 6.7：PageView与页面缓存</a></li><li class="chapter-item expanded "><a href="chapter6/keepalive.html"><strong aria-hidden="true">7.8.</strong> 6.8：可滚动组件子项缓存</a></li><li class="chapter-item expanded "><a href="chapter6/tabview.html"><strong aria-hidden="true">7.9.</strong> 6.9：TabBarView</a></li><li class="chapter-item expanded "><a href="chapter6/custom_scrollview.html"><strong aria-hidden="true">7.10.</strong> 6.10：CustomScrollView与Slivers</a></li><li class="chapter-item expanded "><a href="chapter6/sliver.html"><strong aria-hidden="true">7.11.</strong> 6.11：自定义Sliver</a></li><li class="chapter-item expanded "><a href="chapter6/nestedscrollview.html"><strong aria-hidden="true">7.12.</strong> 6.12：嵌套可滚动组件NestedScrollView</a></li></ol></li><li class="chapter-item expanded "><a href="chapter7/index.html"><strong aria-hidden="true">8.</strong> 第七章：功能型组件</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="chapter7/willpopscope.html"><strong aria-hidden="true">8.1.</strong> 7.1：导航返回拦截（WillPopScope）</a></li><li class="chapter-item expanded "><a href="chapter7/inherited_widget.html"><strong aria-hidden="true">8.2.</strong> 7.2：数据共享（InheritedWidget）</a></li><li class="chapter-item expanded "><a href="chapter7/provider.html"><strong aria-hidden="true">8.3.</strong> 7.3：跨组件状态共享</a></li><li class="chapter-item expanded "><a href="chapter7/theme.html"><strong aria-hidden="true">8.4.</strong> 7.4：颜色和主题</a></li><li class="chapter-item expanded "><a href="chapter7/value_listenable_builder.html"><strong aria-hidden="true">8.5.</strong> 7.5：按需rebuild（ValueListenableBuilder）</a></li><li class="chapter-item expanded "><a href="chapter7/futurebuilder_and_streambuilder.html"><strong aria-hidden="true">8.6.</strong> 7.6：异步UI更新（FutureBuilder、StreamBuilder）</a></li><li class="chapter-item expanded "><a href="chapter7/dailog.html"><strong aria-hidden="true">8.7.</strong> 7.7：对话框详解</a></li></ol></li><li class="chapter-item expanded "><a href="chapter8/index.html"><strong aria-hidden="true">9.</strong> 第八章：事件处理与通知</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="chapter8/listener.html"><strong aria-hidden="true">9.1.</strong> 8.1：原始指针事件处理</a></li><li class="chapter-item expanded "><a href="chapter8/gesture.html"><strong aria-hidden="true">9.2.</strong> 8.2：手势识别</a></li><li class="chapter-item expanded "><a href="chapter8/hittest.html"><strong aria-hidden="true">9.3.</strong> 8.3：Flutter事件机制</a></li><li class="chapter-item expanded "><a href="chapter8/gesture_conflict.html"><strong aria-hidden="true">9.4.</strong> 8.4：手势原理与手势冲突</a></li><li class="chapter-item expanded "><a href="chapter8/eventbus.html"><strong aria-hidden="true">9.5.</strong> 8.5：事件总线</a></li><li class="chapter-item expanded "><a href="chapter8/notification.html"><strong aria-hidden="true">9.6.</strong> 8.6：通知(Notification)</a></li></ol></li><li class="chapter-item expanded "><a href="chapter9/index.html"><strong aria-hidden="true">10.</strong> 第九章：动画</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="chapter9/intro.html"><strong aria-hidden="true">10.1.</strong> 9.1：Flutter动画简介</a></li><li class="chapter-item expanded "><a href="chapter9/animation_structure.html"><strong aria-hidden="true">10.2.</strong> 9.2：动画基本结构及状态监听</a></li><li class="chapter-item expanded "><a href="chapter9/route_transition.html"><strong aria-hidden="true">10.3.</strong> 9.3：自定义路由切换动画</a></li><li class="chapter-item expanded "><a href="chapter9/hero.html"><strong aria-hidden="true">10.4.</strong> 9.4：Hero动画</a></li><li class="chapter-item expanded "><a href="chapter9/stagger_animation.html"><strong aria-hidden="true">10.5.</strong> 9.5：交织动画</a></li><li class="chapter-item expanded "><a href="chapter9/animated_switcher.html"><strong aria-hidden="true">10.6.</strong> 9.6：动画切换组件（AnimatedSwitcher）</a></li><li class="chapter-item expanded "><a href="chapter9/animated_widgets.html"><strong aria-hidden="true">10.7.</strong> 9.7：动画过渡组件</a></li></ol></li><li class="chapter-item expanded "><a href="chapter10/index.html"><strong aria-hidden="true">11.</strong> 第十章：自定义组件</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="chapter10/intro.html"><strong aria-hidden="true">11.1.</strong> 10.1：自定义组件方法简介</a></li><li class="chapter-item expanded "><a href="chapter10/combine.html"><strong aria-hidden="true">11.2.</strong> 10.2：组合现有组件</a></li><li class="chapter-item expanded "><a href="chapter10/turn_box.html"><strong aria-hidden="true">11.3.</strong> 10.3：组合实例：TurnBox</a></li><li class="chapter-item expanded "><a href="chapter10/custom_paint.html"><strong aria-hidden="true">11.4.</strong> 10.4：CustomPaint与Canvas</a></li><li class="chapter-item expanded "><a href="chapter10/gradient_circular_progress_demo.html"><strong aria-hidden="true">11.5.</strong> 10.5：自绘实例：圆形渐变进度条</a></li><li class="chapter-item expanded "><a href="chapter10/custom_checkbox.html"><strong aria-hidden="true">11.6.</strong> 10.6：自绘组件：CustomCheckbox</a></li><li class="chapter-item expanded "><a href="chapter10/done_widget.html"><strong aria-hidden="true">11.7.</strong> 10.7：自绘组件：DoneWidget</a></li><li class="chapter-item expanded "><a href="chapter10/watermark.html"><strong aria-hidden="true">11.8.</strong> 10.8：水印组件实例：文本绘制与离屏渲染</a></li></ol></li><li class="chapter-item expanded "><a href="chapter11/index.html"><strong aria-hidden="true">12.</strong> 第十一章：文件操作与网络请求</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="chapter11/file_operation.html"><strong aria-hidden="true">12.1.</strong> 11.1：文件操作</a></li><li class="chapter-item expanded "><a href="chapter11/http.html"><strong aria-hidden="true">12.2.</strong> 11.2：通过HttpClient发起HTTP请求</a></li><li class="chapter-item expanded "><a href="chapter11/dio.html"><strong aria-hidden="true">12.3.</strong> 11.3：Http请求库-dio</a></li><li class="chapter-item expanded "><a href="chapter11/download_with_chunks.html"><strong aria-hidden="true">12.4.</strong> 11.4：实例：Http分块下载</a></li><li class="chapter-item expanded "><a href="chapter11/websocket.html"><strong aria-hidden="true">12.5.</strong> 11.5：使用WebSocket</a></li><li class="chapter-item expanded "><a href="chapter11/socket.html"><strong aria-hidden="true">12.6.</strong> 11.6：使用Socket API</a></li><li class="chapter-item expanded "><a href="chapter11/json_model.html"><strong aria-hidden="true">12.7.</strong> 11.7：JSON转Dart Model类</a></li></ol></li><li class="chapter-item expanded "><a href="chapter12/index.html"><strong aria-hidden="true">13.</strong> 第十二章：Flutter 扩展</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="chapter12/package_and_plugin.html"><strong aria-hidden="true">13.1.</strong> 12.1：包和插件</a></li><li class="chapter-item expanded "><a href="chapter12/flutter_web.html"><strong aria-hidden="true">13.2.</strong> 12.2：Flutter Web</a></li></ol></li><li class="chapter-item expanded "><a href="chapter13/index.html"><strong aria-hidden="true">14.</strong> 第十三章：国际化</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="chapter13/multi_languages_support.html"><strong aria-hidden="true">14.1.</strong> 13.1：让App支持多语言</a></li><li class="chapter-item expanded "><a href="chapter13/locallization_implement.html"><strong aria-hidden="true">14.2.</strong> 13.2：实现Localizations</a></li><li class="chapter-item expanded "><a href="chapter13/intl.html"><strong aria-hidden="true">14.3.</strong> 13.3：使用Intl包</a></li><li class="chapter-item expanded "><a href="chapter13/faq.html"><strong aria-hidden="true">14.4.</strong> 13.4：国际化常见问题</a></li></ol></li><li class="chapter-item expanded "><a href="chapter14/index.html"><strong aria-hidden="true">15.</strong> 第十四章：Flutter核心原理</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="chapter14/flutter_ui_system.html"><strong aria-hidden="true">15.1.</strong> 14.1：Flutter UI框架（Framework）</a></li><li class="chapter-item expanded "><a href="chapter14/element_buildcontext.html"><strong aria-hidden="true">15.2.</strong> 14.2：Element、BuildContext和RenderObject</a></li><li class="chapter-item expanded "><a href="chapter14/flutter_app_startup.html"><strong aria-hidden="true">15.3.</strong> 14.3：Flutter启动流程和渲染管线</a></li><li class="chapter-item expanded "><a href="chapter14/layout.html"><strong aria-hidden="true">15.4.</strong> 14.4：布局（Layout）过程</a></li><li class="chapter-item expanded "><a href="chapter14/paint.html"><strong aria-hidden="true">15.5.</strong> 14.5：绘制（一）绘制原理及Layer</a></li><li class="chapter-item expanded "><a href="chapter14/paint_flow.html"><strong aria-hidden="true">15.6.</strong> 14.6：绘制（二）组件树绘制流程</a></li><li class="chapter-item expanded "><a href="chapter14/layer.html"><strong aria-hidden="true">15.7.</strong> 14.7：绘制（三）Layer实例</a></li><li class="chapter-item expanded "><a href="chapter14/compositing.html"><strong aria-hidden="true">15.8.</strong> 14.8：绘制（四）Compositing</a></li></ol></li><li class="chapter-item expanded "><a href="chapter15/index.html"><strong aria-hidden="true">16.</strong> 第十五章：一个完整的Flutter应用</a></li><li><ol class="section"><li class="chapter-item expanded "><a href="chapter15/intro.html"><strong aria-hidden="true">16.1.</strong> 15.1：应用简介</a></li><li class="chapter-item expanded "><a href="chapter15/code_structure.html"><strong aria-hidden="true">16.2.</strong> 15.2：APP代码结构</a></li><li class="chapter-item expanded "><a href="chapter15/models.html"><strong aria-hidden="true">16.3.</strong> 15.3：Model类定义</a></li><li class="chapter-item expanded "><a href="chapter15/globals.html"><strong aria-hidden="true">16.4.</strong> 15.4：全局变量及共享状态</a></li><li class="chapter-item expanded "><a href="chapter15/network.html"><strong aria-hidden="true">16.5.</strong> 15.5：网络请求封装</a></li><li class="chapter-item expanded "><a href="chapter15/entry.html"><strong aria-hidden="true">16.6.</strong> 15.6：App入口及首页</a></li><li class="chapter-item expanded "><a href="chapter15/login_page.html"><strong aria-hidden="true">16.7.</strong> 15.7：登录页</a></li><li class="chapter-item expanded "><a href="chapter15/language_and_theme_setting.html"><strong aria-hidden="true">16.8.</strong> 15.8：多语言和多主题</a></li></ol></li></ol>';
        // Set the current, active page, and reveal it if it's hidden
        let current_page = document.location.href.toString().split("#")[0].split("?")[0];
        if (current_page.endsWith("/")) {
            current_page += "index.html";
        }
        var links = Array.prototype.slice.call(this.querySelectorAll("a"));
        var l = links.length;
        for (var i = 0; i < l; ++i) {
            var link = links[i];
            var href = link.getAttribute("href");
            if (href && !href.startsWith("#") && !/^(?:[a-z+]+:)?\/\//.test(href)) {
                link.href = path_to_root + href;
            }
            // The "index" page is supposed to alias the first chapter in the book.
            if (link.href === current_page || (i === 0 && path_to_root === "" && current_page.endsWith("/index.html"))) {
                link.classList.add("active");
                var parent = link.parentElement;
                if (parent && parent.classList.contains("chapter-item")) {
                    parent.classList.add("expanded");
                }
                while (parent) {
                    if (parent.tagName === "LI" && parent.previousElementSibling) {
                        if (parent.previousElementSibling.classList.contains("chapter-item")) {
                            parent.previousElementSibling.classList.add("expanded");
                        }
                    }
                    parent = parent.parentElement;
                }
            }
        }
        // Track and set sidebar scroll position
        this.addEventListener('click', function(e) {
            if (e.target.tagName === 'A') {
                sessionStorage.setItem('sidebar-scroll', this.scrollTop);
            }
        }, { passive: true });
        var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');
        sessionStorage.removeItem('sidebar-scroll');
        if (sidebarScrollTop) {
            // preserve sidebar scroll position when navigating via links within sidebar
            this.scrollTop = sidebarScrollTop;
        } else {
            // scroll sidebar to current active section when navigating via "next/previous chapter" buttons
            var activeSection = document.querySelector('#sidebar .active');
            if (activeSection) {
                activeSection.scrollIntoView({ block: 'center' });
            }
        }
        // Toggle buttons
        var sidebarAnchorToggles = document.querySelectorAll('#sidebar a.toggle');
        function toggleSection(ev) {
            ev.currentTarget.parentElement.classList.toggle('expanded');
        }
        Array.from(sidebarAnchorToggles).forEach(function (el) {
            el.addEventListener('click', toggleSection);
        });
    }
}
window.customElements.define("mdbook-sidebar-scrollbox", MDBookSidebarScrollbox);
